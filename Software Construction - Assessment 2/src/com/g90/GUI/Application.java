package com.g90.GUI;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.extras.FlatAnimatedLafChange;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import com.g90.gui.menus.LoginForm;
import com.g90.gui.menus.MainForm;
import raven.toast.Notifications;

/**
 * Application class extending JFrame to create a GUI window.
 * This class is responsible for setting up the main application window and handling
 * the transition between different forms like login and main form.
 * @author Maahir Hussain Shaik and Roshan Varughese
 */



public class Application extends javax.swing.JFrame {

    // Static instance of Application, allowing global access
    private static Application app;

    // MainForm instance representing the main interface of the application
    private final MainForm mainForm;

    // LoginForm instance representing the login screen
    private final LoginForm loginForm;
    
    int screenWidth = 1280;
    int screenHeight = 720;

    /**
     * Constructor for Application.
     * Sets up the initial state and layout of the application window.
     */

    public Application() {
        // Initializes the GUI components
        initComponents();

        // Sets the initial size of the window
        setSize(new Dimension(screenWidth, screenHeight));

        // Centers the window on the screen
        setLocationRelativeTo(null);

        // Initializes mainForm and loginForm
        mainForm = new MainForm();
        loginForm = new LoginForm();

        // Sets the initial content pane to the login form
        setContentPane(loginForm);

        // Configures notification settings for the application
        Notifications.getInstance().setJFrame(this);
    }

    /**
     * Static method to display a given component within the main form.
     * @param component The component to be displayed.
     */
    public static void showForm(Component component) {
        // Applies the application's component orientation to the given component
        component.applyComponentOrientation(app.getComponentOrientation());

        // Displays the specified component in the main form
        app.mainForm.showForm(component);
    }
    
    /**
     * Static method to handle user login.
     * Switches the content pane to the main form with an animation.
     */
    public static void login() {
        // Shows the transition snapshot
        FlatAnimatedLafChange.showSnapshot();

        // Changes the content pane to the main form
        app.setContentPane(app.mainForm);

        // Applies the application's component orientation to the main form
        app.mainForm.applyComponentOrientation(app.getComponentOrientation());

        // Resets the selected menu to its initial state
        setSelectedMenu(0, 0);

        // Hides the menu in the main form
        app.mainForm.hideMenu();

        // Updates the UI of the main form to reflect changes
        //SwingUtilities.updateComponentTreeUI(app.mainForm);

        // Hides the transition snapshot with an animation
        FlatAnimatedLafChange.hideSnapshotWithAnimation();
    }

  /**
     * Static method to handle user logout.
     * Switches the content pane back to the login form with an animation.
     */
    public static void logout() {
        // Shows the transition snapshot
        FlatAnimatedLafChange.showSnapshot();

        // Changes the content pane to the login form
        app.setContentPane(app.loginForm);

        // Applies the application's component orientation to the login form
        app.loginForm.applyComponentOrientation(app.getComponentOrientation());

        // Updates the UI of the login form to reflect changes
        SwingUtilities.updateComponentTreeUI(app.loginForm);

        // Hides the transition snapshot with an animation
        FlatAnimatedLafChange.hideSnapshotWithAnimation();
    }

    /**
     * Static method to update the selected menu item in the main form.
     * @param index The main menu index.
     * @param subIndex The submenu index.
     */
    public static void setSelectedMenu(int index, int subIndex) {
        app.mainForm.setSelectedMenu(index, subIndex);
    }
    
     /**
     * initComponents method is auto-generated by the GUI designer tool.
     * It sets up the properties and layout of the JFrame.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusCycleRoot(false);
        setMinimumSize(new java.awt.Dimension(1350, 720));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 719, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
     * The main method - entry point of the application.
     * Sets up the look and feel and displays the application window.
     * @param args Command line arguments (not used).
     */
    public static void main(String args[]) {
        // Installing the FlatRobotoFont for a consistent look and feel
        FlatRobotoFont.install();

        // Registering custom defaults for the FlatLaf look and feel
        FlatLaf.registerCustomDefaultsSource("raven.theme");

        // Setting the default font for the UI
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));

        // Setting up the FlatMacDarkLaf look and feel
        FlatMacDarkLaf.setup();

        // Initializing and displaying the application in the Event Dispatch Thread
        java.awt.EventQueue.invokeLater(() -> {
            app = new Application();
            app.setVisible(true);
        });
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
